syntax = "proto2";

package object_detection.protos;

import "object_detection/protos/image_resizer.proto";
import "object_detection/protos/losses.proto";
import "object_detection/protos/post_processing.proto";
import "object_detection/protos/region_similarity_calculator.proto";
import "object_detection/protos/ssd.proto";

// Configuration for LocalizationModel.

message LocalizationModel {
  // Number of classes to predict.
  optional int32 num_classes = 1;

  // Image resizer for preprocessing the input image.
  optional ImageResizer image_resizer = 2;

  // Feature extractor config.
  optional SsdFeatureExtractor feature_extractor = 3;

  // Region similarity calculator to compute similarity of boxes.
  optional RegionSimilarityCalculator similarity_calculator = 4;

  // Whether background targets are to be encoded as an all
  // zeros vector or a one-hot vector (where background is the 0th class).
  optional bool encode_background_as_zeros = 5 [default = false];

  // classification weight to be associated to negative
  // anchors (default: 1.0). The weight must be in [0., 1.].
  optional float negative_class_weight = 6 [default = 1.0];

  // Post processing to apply on the predictions.
  optional PostProcessing post_processing = 7;

  // Whether to normalize the localization loss by the code size of the box
  // encodings. This is applied along with other normalization factors.
  optional bool normalize_loc_loss_by_codesize = 8 [default = false];

  // Loss configuration for training.
  optional Loss loss = 9;

  // Whether to update batch norm parameters during training or not.
  // When training with a relative small batch size (e.g. 1), it is
  // desirable to disable batch norm update and use pretrained batch norm
  // params.
  //
  // Note: Some feature extractors are used with canned arg_scopes
  // (e.g resnet arg scopes).  In these cases training behavior of batch norm
  // variables may depend on both values of `batch_norm_trainable` and
  // `is_training`.
  //
  // When canned arg_scopes are used with feature extractors `conv_hyperparams`
  // will apply only to the additional layers that are added and are outside the
  // canned arg_scope.
  optional bool freeze_batchnorm = 10 [default = false];

  // Whether to update batch_norm inplace during training. This is required
  // for batch norm to work correctly on TPUs. When this is false, user must add
  // a control dependency on tf.GraphKeys.UPDATE_OPS for train/loss op in order
  // to update the batch norm moving average parameters.
  optional bool inplace_batchnorm_update = 11 [default = false];

  // Whether to add an implicit background class to one-hot encodings of
  // groundtruth labels. Set to false if training a single
  // class model or using an explicit background class.
  optional bool add_background_class = 12 [default = true];

  // Whether to use an explicit background class. Set to true if using
  // groundtruth labels with an explicit background class, as in multiclass
  // scores.
  optional bool explicit_background_class = 13 [default = false];

  optional bool use_confidences_as_targets = 14 [default = false];

  optional float implicit_example_weight = 15 [default = 1.0];

  optional bool return_raw_detections_during_predict = 16 [default = false];

  optional int32 max_spatial_predictions = 17 [default = 1];

  optional string box_encoding_type = 18 [default=""];

  optional float y_scale = 19 [default = 1000.0];
  optional float x_scale = 20 [default = 1000.0];
  optional float height_scale = 21 [default = 1000.0];
  optional float width_scale = 22 [default = 1000.0];
  optional float scale_factor= 23 [default = 1000.0];

  optional bool ignore_weights= 25[default=false];
}

